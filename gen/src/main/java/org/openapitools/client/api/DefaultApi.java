/*
 * Get Items in Custom Carousel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Blog;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.EditViewData;
import org.openapitools.client.model.RecentViewData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for blogsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of blogs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blogsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blogsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Return a list of blogs for the carousel(all)
     * 
     * @return List&lt;Blog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of blogs </td><td>  -  </td></tr>
     </table>
     */
    public List<Blog> blogsGet() throws ApiException {
        ApiResponse<List<Blog>> localVarResp = blogsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Return a list of blogs for the carousel(all)
     * 
     * @return ApiResponse&lt;List&lt;Blog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of blogs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Blog>> blogsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = blogsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Blog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of blogs for the carousel(all) (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of blogs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsGetAsync(final ApiCallback<List<Blog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = blogsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Blog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blogsIdDelete
     * @param id ID of the blog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blogs/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blogsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling blogsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = blogsIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a specific blog by its ID
     * 
     * @param id ID of the blog (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public void blogsIdDelete(String id) throws ApiException {
        blogsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete a specific blog by its ID
     * 
     * @param id ID of the blog (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blogsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = blogsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific blog by its ID (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blogsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blogsIdGet
     * @param id ID of the blog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Blog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blogs/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blogsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling blogsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = blogsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Return a specific blog by its ID
     * 
     * @param id ID of the blog (required)
     * @return Blog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Blog not found </td><td>  -  </td></tr>
     </table>
     */
    public Blog blogsIdGet(String id) throws ApiException {
        ApiResponse<Blog> localVarResp = blogsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return a specific blog by its ID
     * 
     * @param id ID of the blog (required)
     * @return ApiResponse&lt;Blog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Blog not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Blog> blogsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = blogsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Blog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a specific blog by its ID (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Blog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsIdGetAsync(String id, final ApiCallback<Blog> _callback) throws ApiException {

        okhttp3.Call localVarCall = blogsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Blog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blogsIdPut
     * @param id ID of the blog (required)
     * @param blog  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsIdPutCall(String id, Blog blog, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blog;

        // create path and map variables
        String localVarPath = "/blogs/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blogsIdPutValidateBeforeCall(String id, Blog blog, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling blogsIdPut(Async)");
        }
        
        // verify the required parameter 'blog' is set
        if (blog == null) {
            throw new ApiException("Missing the required parameter 'blog' when calling blogsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = blogsIdPutCall(id, blog, _callback);
        return localVarCall;

    }

    /**
     * Update a specific blog by its ID
     * 
     * @param id ID of the blog (required)
     * @param blog  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public void blogsIdPut(String id, Blog blog) throws ApiException {
        blogsIdPutWithHttpInfo(id, blog);
    }

    /**
     * Update a specific blog by its ID
     * 
     * @param id ID of the blog (required)
     * @param blog  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blogsIdPutWithHttpInfo(String id, Blog blog) throws ApiException {
        okhttp3.Call localVarCall = blogsIdPutValidateBeforeCall(id, blog, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a specific blog by its ID (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param blog  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blog updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogsIdPutAsync(String id, Blog blog, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blogsIdPutValidateBeforeCall(id, blog, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = categoriesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieve all categories
     * 
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> categoriesGet() throws ApiException {
        ApiResponse<List<Category>> localVarResp = categoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve all categories
     * 
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> categoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all categories (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetAsync(final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesKeyDelete
     * @param key key of the category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyDeleteCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesKeyDeleteValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling categoriesKeyDelete(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesKeyDeleteCall(key, _callback);
        return localVarCall;

    }

    /**
     * Delete a specific category by its ID
     * 
     * @param key key of the category (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesKeyDelete(String key) throws ApiException {
        categoriesKeyDeleteWithHttpInfo(key);
    }

    /**
     * Delete a specific category by its ID
     * 
     * @param key key of the category (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesKeyDeleteWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = categoriesKeyDeleteValidateBeforeCall(key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific category by its ID (asynchronously)
     * 
     * @param key key of the category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyDeleteAsync(String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesKeyDeleteValidateBeforeCall(key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesKeyGet
     * @param key key of the category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyGetCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesKeyGetValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling categoriesKeyGet(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesKeyGetCall(key, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a specific category (Search by key)
     * 
     * @param key key of the category (required)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public Category categoriesKeyGet(String key) throws ApiException {
        ApiResponse<Category> localVarResp = categoriesKeyGetWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Retrieve a specific category (Search by key)
     * 
     * @param key key of the category (required)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category> categoriesKeyGetWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = categoriesKeyGetValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a specific category (Search by key) (asynchronously)
     * 
     * @param key key of the category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyGetAsync(String key, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesKeyGetValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesKeyPut
     * @param key key of the category (required)
     * @param category  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyPutCall(String key, Category category, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = category;

        // create path and map variables
        String localVarPath = "/categories/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesKeyPutValidateBeforeCall(String key, Category category, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling categoriesKeyPut(Async)");
        }
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling categoriesKeyPut(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesKeyPutCall(key, category, _callback);
        return localVarCall;

    }

    /**
     * Update a specific category by its ID
     * 
     * @param key key of the category (required)
     * @param category  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesKeyPut(String key, Category category) throws ApiException {
        categoriesKeyPutWithHttpInfo(key, category);
    }

    /**
     * Update a specific category by its ID
     * 
     * @param key key of the category (required)
     * @param category  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesKeyPutWithHttpInfo(String key, Category category) throws ApiException {
        okhttp3.Call localVarCall = categoriesKeyPutValidateBeforeCall(key, category, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a specific category by its ID (asynchronously)
     * 
     * @param key key of the category (required)
     * @param category  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyPutAsync(String key, Category category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesKeyPutValidateBeforeCall(key, category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesPost
     * @param category  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostCall(Category category, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = category;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesPostValidateBeforeCall(Category category, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling categoriesPost(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesPostCall(category, _callback);
        return localVarCall;

    }

    /**
     * Create a new category
     * 
     * @param category  (required)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public Category categoriesPost(Category category) throws ApiException {
        ApiResponse<Category> localVarResp = categoriesPostWithHttpInfo(category);
        return localVarResp.getData();
    }

    /**
     * Create a new category
     * 
     * @param category  (required)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category> categoriesPostWithHttpInfo(Category category) throws ApiException {
        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(category, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new category (asynchronously)
     * 
     * @param category  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Category created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostAsync(Category category, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(category, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createViewGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createViewGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/create-view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createViewGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createViewGetCall(_callback);
        return localVarCall;

    }

    /**
     * Return Create View Data
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public void createViewGet() throws ApiException {
        createViewGetWithHttpInfo();
    }

    /**
     * Return Create View Data
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createViewGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createViewGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return Create View Data (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createViewGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createViewGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editViewIdGet
     * @param id ID of the blog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editViewIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/edit-view/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editViewIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editViewIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = editViewIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get the edit view data
     * 
     * @param id ID of the blog (required)
     * @return EditViewData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public EditViewData editViewIdGet(String id) throws ApiException {
        ApiResponse<EditViewData> localVarResp = editViewIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the edit view data
     * 
     * @param id ID of the blog (required)
     * @return ApiResponse&lt;EditViewData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditViewData> editViewIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = editViewIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EditViewData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the edit view data (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editViewIdGetAsync(String id, final ApiCallback<EditViewData> _callback) throws ApiException {

        okhttp3.Call localVarCall = editViewIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EditViewData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editViewIdPut
     * @param id ID of the blog (required)
     * @param editViewData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editViewIdPutCall(String id, EditViewData editViewData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = editViewData;

        // create path and map variables
        String localVarPath = "/edit-view/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editViewIdPutValidateBeforeCall(String id, EditViewData editViewData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editViewIdPut(Async)");
        }
        
        // verify the required parameter 'editViewData' is set
        if (editViewData == null) {
            throw new ApiException("Missing the required parameter 'editViewData' when calling editViewIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = editViewIdPutCall(id, editViewData, _callback);
        return localVarCall;

    }

    /**
     * Update the edit view data
     * 
     * @param id ID of the blog (required)
     * @param editViewData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public void editViewIdPut(String id, EditViewData editViewData) throws ApiException {
        editViewIdPutWithHttpInfo(id, editViewData);
    }

    /**
     * Update the edit view data
     * 
     * @param id ID of the blog (required)
     * @param editViewData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editViewIdPutWithHttpInfo(String id, EditViewData editViewData) throws ApiException {
        okhttp3.Call localVarCall = editViewIdPutValidateBeforeCall(id, editViewData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the edit view data (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param editViewData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editViewIdPutAsync(String id, EditViewData editViewData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editViewIdPutValidateBeforeCall(id, editViewData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recentViewGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recent-view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recentViewGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = recentViewGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get the recent view data
     * 
     * @return RecentViewData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public RecentViewData recentViewGet() throws ApiException {
        ApiResponse<RecentViewData> localVarResp = recentViewGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the recent view data
     * 
     * @return ApiResponse&lt;RecentViewData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecentViewData> recentViewGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = recentViewGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RecentViewData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the recent view data (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewGetAsync(final ApiCallback<RecentViewData> _callback) throws ApiException {

        okhttp3.Call localVarCall = recentViewGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RecentViewData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recentViewIdDelete
     * @param id ID of the recent view data (required)
     * @param recentViewData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewIdDeleteCall(String id, RecentViewData recentViewData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = recentViewData;

        // create path and map variables
        String localVarPath = "/recent-view/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recentViewIdDeleteValidateBeforeCall(String id, RecentViewData recentViewData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recentViewIdDelete(Async)");
        }
        
        // verify the required parameter 'recentViewData' is set
        if (recentViewData == null) {
            throw new ApiException("Missing the required parameter 'recentViewData' when calling recentViewIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = recentViewIdDeleteCall(id, recentViewData, _callback);
        return localVarCall;

    }

    /**
     * Delete a specific blog by its ID
     * 
     * @param id ID of the recent view data (required)
     * @param recentViewData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public void recentViewIdDelete(String id, RecentViewData recentViewData) throws ApiException {
        recentViewIdDeleteWithHttpInfo(id, recentViewData);
    }

    /**
     * Delete a specific blog by its ID
     * 
     * @param id ID of the recent view data (required)
     * @param recentViewData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recentViewIdDeleteWithHttpInfo(String id, RecentViewData recentViewData) throws ApiException {
        okhttp3.Call localVarCall = recentViewIdDeleteValidateBeforeCall(id, recentViewData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific blog by its ID (asynchronously)
     * 
     * @param id ID of the recent view data (required)
     * @param recentViewData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewIdDeleteAsync(String id, RecentViewData recentViewData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recentViewIdDeleteValidateBeforeCall(id, recentViewData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recentViewIdGet
     * @param id ID of the blog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recent-view/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recentViewIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recentViewIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = recentViewIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Search specific data by ID
     * 
     * @param id ID of the blog (required)
     * @return RecentViewData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public RecentViewData recentViewIdGet(String id) throws ApiException {
        ApiResponse<RecentViewData> localVarResp = recentViewIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Search specific data by ID
     * 
     * @param id ID of the blog (required)
     * @return ApiResponse&lt;RecentViewData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecentViewData> recentViewIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = recentViewIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecentViewData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search specific data by ID (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewIdGetAsync(String id, final ApiCallback<RecentViewData> _callback) throws ApiException {

        okhttp3.Call localVarCall = recentViewIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecentViewData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recentViewIdPut
     * @param id ID of the blog (required)
     * @param recentViewData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewIdPutCall(String id, RecentViewData recentViewData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = recentViewData;

        // create path and map variables
        String localVarPath = "/recent-view/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recentViewIdPutValidateBeforeCall(String id, RecentViewData recentViewData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recentViewIdPut(Async)");
        }
        
        // verify the required parameter 'recentViewData' is set
        if (recentViewData == null) {
            throw new ApiException("Missing the required parameter 'recentViewData' when calling recentViewIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = recentViewIdPutCall(id, recentViewData, _callback);
        return localVarCall;

    }

    /**
     * Update data of the specific blog
     * 
     * @param id ID of the blog (required)
     * @param recentViewData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public void recentViewIdPut(String id, RecentViewData recentViewData) throws ApiException {
        recentViewIdPutWithHttpInfo(id, recentViewData);
    }

    /**
     * Update data of the specific blog
     * 
     * @param id ID of the blog (required)
     * @param recentViewData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recentViewIdPutWithHttpInfo(String id, RecentViewData recentViewData) throws ApiException {
        okhttp3.Call localVarCall = recentViewIdPutValidateBeforeCall(id, recentViewData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update data of the specific blog (asynchronously)
     * 
     * @param id ID of the blog (required)
     * @param recentViewData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent view data updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recentViewIdPutAsync(String id, RecentViewData recentViewData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recentViewIdPutValidateBeforeCall(id, recentViewData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
