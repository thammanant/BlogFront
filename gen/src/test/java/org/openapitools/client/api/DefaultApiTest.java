/*
 * Get Items in Custom Carousel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Blog;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.EditViewData;
import org.openapitools.client.model.RecentViewData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Return a list of blogs for the carousel(all)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blogsGetTest() throws ApiException {
        List<Blog> response = api.blogsGet();

        // TODO: test validations
    }
    
    /**
     * Delete a specific blog by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blogsIdDeleteTest() throws ApiException {
        String id = null;
        api.blogsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Return a specific blog by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blogsIdGetTest() throws ApiException {
        String id = null;
        Blog response = api.blogsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update a specific blog by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blogsIdPutTest() throws ApiException {
        String id = null;
        Blog blog = null;
        api.blogsIdPut(id, blog);

        // TODO: test validations
    }
    
    /**
     * Retrieve all categories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesGetTest() throws ApiException {
        List<Category> response = api.categoriesGet();

        // TODO: test validations
    }
    
    /**
     * Delete a specific category by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesKeyDeleteTest() throws ApiException {
        String key = null;
        api.categoriesKeyDelete(key);

        // TODO: test validations
    }
    
    /**
     * Retrieve a specific category (Search by key)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesKeyGetTest() throws ApiException {
        String key = null;
        Category response = api.categoriesKeyGet(key);

        // TODO: test validations
    }
    
    /**
     * Update a specific category by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesKeyPutTest() throws ApiException {
        String key = null;
        Category category = null;
        api.categoriesKeyPut(key, category);

        // TODO: test validations
    }
    
    /**
     * Create a new category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesPostTest() throws ApiException {
        Category category = null;
        Category response = api.categoriesPost(category);

        // TODO: test validations
    }
    
    /**
     * Return Create View Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createViewGetTest() throws ApiException {
        api.createViewGet();

        // TODO: test validations
    }
    
    /**
     * Get the edit view data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editViewIdGetTest() throws ApiException {
        String id = null;
        EditViewData response = api.editViewIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update the edit view data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editViewIdPutTest() throws ApiException {
        String id = null;
        EditViewData editViewData = null;
        api.editViewIdPut(id, editViewData);

        // TODO: test validations
    }
    
    /**
     * Get the recent view data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recentViewGetTest() throws ApiException {
        RecentViewData response = api.recentViewGet();

        // TODO: test validations
    }
    
    /**
     * Delete a specific blog by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recentViewIdDeleteTest() throws ApiException {
        String id = null;
        RecentViewData recentViewData = null;
        api.recentViewIdDelete(id, recentViewData);

        // TODO: test validations
    }
    
    /**
     * Search specific data by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recentViewIdGetTest() throws ApiException {
        String id = null;
        RecentViewData response = api.recentViewIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update data of the specific blog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recentViewIdPutTest() throws ApiException {
        String id = null;
        RecentViewData recentViewData = null;
        api.recentViewIdPut(id, recentViewData);

        // TODO: test validations
    }
    
}
